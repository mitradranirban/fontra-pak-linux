name: Build and Release ARM Linux Binary
on:
  schedule:
    - cron: "21 2 * * 0" # Runs one hour after the x86 workflow
  workflow_dispatch:

jobs:
  build-ubuntu-arm-binary:
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: install CMake
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake

      - name: Download cffsubr source
        run: pip download --no-binary ':all:' cffsubr

      - name: Extract cffsubr source
        run: |
          tar xvf cffsubr-*.tar.gz

      - name: Install cffsubr with antlr4 runtime patching inline
        run: |
          set -e
          echo "Installing cffsubr with antlr4 runtime patch..."

          # Create a background process to continuously patch antlr4 files
          patch_antlr4_continuously() {
            while true; do
              find /tmp -name "CMakeLists.txt" -path "*antlr4*" 2>/dev/null | while read -r cmake_file; do
                if grep -q "cmake_minimum_required.*VERSION.*[0-4]\." "$cmake_file" 2>/dev/null; then
                  echo "Patching $cmake_file"
                  sed -i 's/cmake_minimum_required.*VERSION [0-9.]*)/cmake_minimum_required(VERSION 3.5)/g' "$cmake_file"
                fi
              done
              sleep 1
            done
          }

          patch_antlr4_continuously &
          PATCHER_PID=$!
          trap "kill $PATCHER_PID 2>/dev/null || true" EXIT

          export CMAKE_ARGS="-DCMAKE_POLICY_VERSION_MINIMUM=3.5"
          export CMAKE_BUILD_PARALLEL_LEVEL="$(nproc)"

          echo "Starting pip install..."
          pip install --no-cache-dir -v -r requirements.txt
          echo "Installation completed successfully!"


      - name: Build exe
        run: |
          pyinstaller FontraPak.spec -y
          mv dist/Fontra\ Pak dist/fontrapak-arm

      - name: Run tests
        run: |
          pytest

      - name: Query __version__ string and add to version.txt
        id: query-version
        run: |
          echo $(python -c "import fontra; print(fontra.__version__)") > ./dist/version.txt

      - name: Storing Ubuntu Artifacts
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: fontrapak-arm
          path: ./dist/*

  release-with-tag:
    runs-on: ubuntu-latest
    needs: [build-ubuntu-arm-binary]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Retrieve Artifact
        uses: actions/download-artifact@v4
        with:
          path: ./dl

      - name: make binary executable
        run: chmod +x ./dl/fontrapak-arm/fontrapak-arm

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ./dl

      - name: tar gzip file
        run: |
          cd ./dl
          tar -czvf fontrapak-arm.tgz "fontrapak-arm"

      # Read version.txt into a variable
      - name: Get version from version.txt
        id: get_version
        run: |
          version=$(cat ./dl/fontrapak-arm/version.txt)
          # Remove whitespace if necessary
          version=$(echo "$version" | tr -d '[:space:]')
          echo "version=$version" >> $GITHUB_OUTPUT

      # Upload fontrapak tarball as a release asset
      - name: Upload fontrapak binary
        uses: softprops/action-gh-release@v2
        with:
          files: ./dl/fontrapak-arm.tgz
          tag_name: ${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
