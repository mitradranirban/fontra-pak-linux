name: Build and Release ARM Linux Binary
on:
  schedule:
    - cron: "21 2 * * 0" # Runs one hour after the x86 workflow
  workflow_dispatch:

jobs:
  build-ubuntu-arm-binary:
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: install CMake
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake


      - name: Download ANTLR4 C++ runtime source
        run: |
           wget https://www.antlr.org/download/antlr4-cpp-runtime-4.13.2-source.zip
           unzip antlr4-cpp-runtime-4.13.2-source.zip

      - name: Patch ANTLR4 CMakeLists.txt for CMake >= 3.5 compatibility
        run: |
           # Update minimum CMake version requirement to 3.5 or 3.28 as needed
           sed -i 's/cmake_minimum_required(VERSION .*)/cmake_minimum_required(VERSION 3.28)/' antlr4-cpp-runtime-4.13.2-source/runtime/Cpp/runtime/CMakeLists.txt

           # Patch googletest CMakeLists.txt inside external dependencies if present
           # Adjust path as necessary depending on how googletest is fetched or included
           find antlr4-cpp-runtime-4.13.2-source -name CMakeLists.txt -exec sed -i 's/cmake_minimum_required(VERSION .*)/cmake_minimum_required(VERSION 3.5)/' {} +

      - name: Build and install patched ANTLR4
        run: |
          cd antlr4-cpp-runtime-4.13.2-source
          mkdir build && cd build
          cmake .. -DWITH_DEMO=True
          make -j$(nproc)
          sudo make install

      - name: Install  dependencies
        run: |
          pip install -r requirements.txt
      

      - name: Build exe
        run: |
          pyinstaller FontraPak.spec -y
          mv dist/Fontra\ Pak dist/fontrapak-arm

      - name: Run tests
        run: |
          pytest

      - name: Query __version__ string and add to version.txt
        id: query-version
        run: |
          echo $(python -c "import fontra; print(fontra.__version__)") > ./dist/version.txt

      - name: Storing Ubuntu Artifacts
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: fontrapak-arm
          path: ./dist/*

  release-with-tag:
    runs-on: ubuntu-latest
    needs: [build-ubuntu-arm-binary]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Retrieve Artifact
        uses: actions/download-artifact@v4
        with:
          path: ./dl

      - name: make binary executable
        run: chmod +x ./dl/fontrapak-arm/fontrapak-arm

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ./dl

      - name: tar gzip file
        run: |
          cd ./dl
          tar -czvf fontrapak-arm.tgz "fontrapak-arm"

      # Read version.txt into a variable
      - name: Get version from version.txt
        id: get_version
        run: |
          version=$(cat ./dl/fontrapak-arm/version.txt)
          # Remove whitespace if necessary
          version=$(echo "$version" | tr -d '[:space:]')
          echo "version=$version" >> $GITHUB_OUTPUT

      # Upload fontrapak tarball as a release asset
      - name: Upload fontrapak binary
        uses: softprops/action-gh-release@v2
        with:
          files: ./dl/fontrapak-arm.tgz
          tag_name: ${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
